// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch","fullTextIndex"]
}

model Class {
  id       String   @id @default(cuid())
  name     String   @unique
  subjects Subject[]
}

model Subject {
  id        String   @id @default(uuid())
  name      String   @unique
  class     Class    @relation(fields: [classId], references: [id])
  classId   String
  parts     Part[]
  imageUrl String?
  @@index([classId])
}

model Part {
  id        String    @id @default(uuid())
  name      String   @unique
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
  chapters  Chapter[]
  imageUrl String?
  @@index([subjectId])
}

model Chapter {
  id        String   @id @default(uuid())
  name      String   
  part      Part     @relation(fields: [partId], references: [id])
  partId    String
  quizzes   Quiz[]
  attachments Attachment[]
  order     Int
  @@index([partId])
}
model Attachment{
    id String @id @default(uuid())
    name String
    url String @db.Text
    chapterId String
    chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@index([chapterId])
}
model Quiz {
  id        String   @id @default(uuid())
  name      String
  chapter   Chapter @relation(fields: [chapterId], references: [id])
  chapterId String
  leaderboard Leaderboard[]
  questions Question[]
  scores Score[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([chapterId])
}
model Question {
  id        String   @id @default(uuid())
  text      String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  options   Option[]
  imageUrl  String?
  @@index([quizId])
}
model Option {
  id        String   @id @default(uuid())
  text      String
  question  Question @relation(fields: [questionId], references: [id])
  questionId String
  isCorrect Boolean
  @@index([questionId])
}
model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  scores   Score[]
}

model Score {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  score     Int
  leaderboard Leaderboard[]
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([quizId])
}

model Leaderboard {
  id        String   @id @default(uuid())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  scores   Score[]
  @@index([quizId])
}